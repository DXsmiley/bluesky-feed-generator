generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
  recursive_type_depth = -1
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SubscriptionState {
  service String @id
  cursor Int
}

model BlueSkyClientSession {
  id Int @id @default(autoincrement())
  handle String
  session_string String
  created_at DateTime @default(now())
}

model Actor {
  did String @id
  handle String
  description String?
  displayName String?
  avatar String?
  follower_count Int @default(0)
  following_count Int @default(0)
  // This should allow us to pipe in a bunch of users without too much risk
  // They'll count for votes but not have their posts appear in feeds
  posts Post[]
  likes Like[]
  // audit_log AuditLog[]
  // New things which are slightly more granular, allowing for computation on 
  // database QUERY rather than database INSERT
  is_muted Boolean @default(false)
  is_furrylist_verified Boolean @default(false)
  autolabel_masc_vibes Boolean @default(false)
  autolabel_nb_vibes Boolean @default(false)
  autolabel_fem_vibes Boolean @default(false)
  manual_include_in_fox_feed Boolean?
  manual_include_in_vix_feed Boolean?
  flagged_for_manual_review Boolean @default(false)
  // Whenever we push updates to things, we might want to reconsider what's in the database
  rescan_version_number Int @default(0)
  @@index([did])
}

model Post {
  uri String @id
  cid String
  reply_parent String?
  reply_root String?
  indexed_at DateTime @default(now())
  like_count Int @default(0)
  text String
  mentions_fursuit Boolean
  media_count Int
  media_with_alt_text_count Int @default(0)
  authorId String
  author Actor @relation(fields: [authorId], references: [did], onDelete: Cascade)
  likes Like[]
  labels String[]
  last_rescan DateTime?
  is_pinned Boolean @default(false)
  // audit_log AuditLog[]
  // Media URLs
  m0 String?
  m1 String?
  m2 String?
  m3 String?
  // Computer vision stuff
  cv_has_fursuit Boolean?
  cv_bounding_boxes Json?
  cv_model_name String?
  // CV stuff but better format
  experiment_results ExperimentResult[]
  @@index([uri])
  @@index([indexed_at])
  @@index([authorId, indexed_at])
  @@index([is_pinned, indexed_at])
}

model Like {
  uri String @id
  cid String // do I even need this?
  liker_id String
  liker Actor @relation(fields: [liker_id], references: [did], onDelete: Cascade)
  post_uri String
  post Post @relation(fields: [post_uri], references: [uri], onDelete: Cascade)
  post_cid String
  created_at DateTime
  attributed_feed String? // Tracks if we think the like came from a user using our feed
  @@index([created_at])
  @@index([attributed_feed, created_at])
  @@index([post_uri, liker_id])
  @@unique([post_uri, liker_id])
}

model PostScore {
  uri String
  version Int
  feed_name String
  score Float
  created_at DateTime
  @@id([feed_name, version, uri])
  @@index([feed_name, version, score(sort: Desc)])
  @@index([created_at])
}

// model AuditLog {
//   id Int @id @default(autoincrement())
//   created_at DateTime @default(now())
//   subject_id String
//   subject Actor? @relation(fields: [subject_id], references: [did])
//   post_id String
//   post Post? @relation(fields: [post_id], references: [uri])
//   description String
// }

model ServedBlock {
  id Int @id @default(autoincrement())
  when DateTime
  cursor String?
  limit Int
  served Int
  feed_name String
  client_did String?
  @@index([when])
}

model ServedPost {
  id Int @id @default(autoincrement())
  when DateTime
  post_uri String
  client_did String?
  feed_name String
  @@index([when])
}

model ExperimentResult {
  id Int @id @default(autoincrement())
  post_uri String
  post Post @relation(fields: [post_uri], references: [uri], onDelete: Cascade)
  experiment_name String
  experiment_version Int
  result_score Float
  result_comment String
  media_index Int
  did_error Boolean
}
